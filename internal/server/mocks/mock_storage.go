// Code generated by MockGen. DO NOT EDIT.
// Source: storage.go
//
// Generated by this command:
//
//	mockgen -source=storage.go -destination=../../mocks/mock_storage.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/stepkareserva/obsermon/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockGaugeStorage is a mock of GaugeStorage interface.
type MockGaugeStorage struct {
	ctrl     *gomock.Controller
	recorder *MockGaugeStorageMockRecorder
	isgomock struct{}
}

// MockGaugeStorageMockRecorder is the mock recorder for MockGaugeStorage.
type MockGaugeStorageMockRecorder struct {
	mock *MockGaugeStorage
}

// NewMockGaugeStorage creates a new mock instance.
func NewMockGaugeStorage(ctrl *gomock.Controller) *MockGaugeStorage {
	mock := &MockGaugeStorage{ctrl: ctrl}
	mock.recorder = &MockGaugeStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugeStorage) EXPECT() *MockGaugeStorageMockRecorder {
	return m.recorder
}

// FindGauge mocks base method.
func (m *MockGaugeStorage) FindGauge(name string) (*models.Gauge, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGauge", name)
	ret0, _ := ret[0].(*models.Gauge)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindGauge indicates an expected call of FindGauge.
func (mr *MockGaugeStorageMockRecorder) FindGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGauge", reflect.TypeOf((*MockGaugeStorage)(nil).FindGauge), name)
}

// ListGauges mocks base method.
func (m *MockGaugeStorage) ListGauges() (models.GaugesList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGauges")
	ret0, _ := ret[0].(models.GaugesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGauges indicates an expected call of ListGauges.
func (mr *MockGaugeStorageMockRecorder) ListGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGauges", reflect.TypeOf((*MockGaugeStorage)(nil).ListGauges))
}

// ReplaceGauges mocks base method.
func (m *MockGaugeStorage) ReplaceGauges(val models.GaugesList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceGauges", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceGauges indicates an expected call of ReplaceGauges.
func (mr *MockGaugeStorageMockRecorder) ReplaceGauges(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceGauges", reflect.TypeOf((*MockGaugeStorage)(nil).ReplaceGauges), val)
}

// SetGauge mocks base method.
func (m *MockGaugeStorage) SetGauge(val models.Gauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockGaugeStorageMockRecorder) SetGauge(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockGaugeStorage)(nil).SetGauge), val)
}

// SetGauges mocks base method.
func (m *MockGaugeStorage) SetGauges(val models.GaugesList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauges", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauges indicates an expected call of SetGauges.
func (mr *MockGaugeStorageMockRecorder) SetGauges(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauges", reflect.TypeOf((*MockGaugeStorage)(nil).SetGauges), val)
}

// MockCounterStorage is a mock of CounterStorage interface.
type MockCounterStorage struct {
	ctrl     *gomock.Controller
	recorder *MockCounterStorageMockRecorder
	isgomock struct{}
}

// MockCounterStorageMockRecorder is the mock recorder for MockCounterStorage.
type MockCounterStorageMockRecorder struct {
	mock *MockCounterStorage
}

// NewMockCounterStorage creates a new mock instance.
func NewMockCounterStorage(ctrl *gomock.Controller) *MockCounterStorage {
	mock := &MockCounterStorage{ctrl: ctrl}
	mock.recorder = &MockCounterStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCounterStorage) EXPECT() *MockCounterStorageMockRecorder {
	return m.recorder
}

// FindCounter mocks base method.
func (m *MockCounterStorage) FindCounter(name string) (*models.Counter, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCounter", name)
	ret0, _ := ret[0].(*models.Counter)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindCounter indicates an expected call of FindCounter.
func (mr *MockCounterStorageMockRecorder) FindCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCounter", reflect.TypeOf((*MockCounterStorage)(nil).FindCounter), name)
}

// ListCounters mocks base method.
func (m *MockCounterStorage) ListCounters() (models.CountersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCounters")
	ret0, _ := ret[0].(models.CountersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCounters indicates an expected call of ListCounters.
func (mr *MockCounterStorageMockRecorder) ListCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCounters", reflect.TypeOf((*MockCounterStorage)(nil).ListCounters))
}

// ReplaceCounters mocks base method.
func (m *MockCounterStorage) ReplaceCounters(val models.CountersList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceCounters", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceCounters indicates an expected call of ReplaceCounters.
func (mr *MockCounterStorageMockRecorder) ReplaceCounters(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceCounters", reflect.TypeOf((*MockCounterStorage)(nil).ReplaceCounters), val)
}

// UpdateCounter mocks base method.
func (m *MockCounterStorage) UpdateCounter(val models.Counter) (*models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", val)
	ret0, _ := ret[0].(*models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockCounterStorageMockRecorder) UpdateCounter(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockCounterStorage)(nil).UpdateCounter), val)
}

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
	isgomock struct{}
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// FindCounter mocks base method.
func (m *MockStorage) FindCounter(name string) (*models.Counter, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCounter", name)
	ret0, _ := ret[0].(*models.Counter)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindCounter indicates an expected call of FindCounter.
func (mr *MockStorageMockRecorder) FindCounter(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCounter", reflect.TypeOf((*MockStorage)(nil).FindCounter), name)
}

// FindGauge mocks base method.
func (m *MockStorage) FindGauge(name string) (*models.Gauge, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGauge", name)
	ret0, _ := ret[0].(*models.Gauge)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindGauge indicates an expected call of FindGauge.
func (mr *MockStorageMockRecorder) FindGauge(name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGauge", reflect.TypeOf((*MockStorage)(nil).FindGauge), name)
}

// ListCounters mocks base method.
func (m *MockStorage) ListCounters() (models.CountersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCounters")
	ret0, _ := ret[0].(models.CountersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCounters indicates an expected call of ListCounters.
func (mr *MockStorageMockRecorder) ListCounters() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCounters", reflect.TypeOf((*MockStorage)(nil).ListCounters))
}

// ListGauges mocks base method.
func (m *MockStorage) ListGauges() (models.GaugesList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGauges")
	ret0, _ := ret[0].(models.GaugesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGauges indicates an expected call of ListGauges.
func (mr *MockStorageMockRecorder) ListGauges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGauges", reflect.TypeOf((*MockStorage)(nil).ListGauges))
}

// ReplaceCounters mocks base method.
func (m *MockStorage) ReplaceCounters(val models.CountersList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceCounters", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceCounters indicates an expected call of ReplaceCounters.
func (mr *MockStorageMockRecorder) ReplaceCounters(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceCounters", reflect.TypeOf((*MockStorage)(nil).ReplaceCounters), val)
}

// ReplaceGauges mocks base method.
func (m *MockStorage) ReplaceGauges(val models.GaugesList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReplaceGauges", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReplaceGauges indicates an expected call of ReplaceGauges.
func (mr *MockStorageMockRecorder) ReplaceGauges(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReplaceGauges", reflect.TypeOf((*MockStorage)(nil).ReplaceGauges), val)
}

// SetGauge mocks base method.
func (m *MockStorage) SetGauge(val models.Gauge) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauge", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauge indicates an expected call of SetGauge.
func (mr *MockStorageMockRecorder) SetGauge(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauge", reflect.TypeOf((*MockStorage)(nil).SetGauge), val)
}

// SetGauges mocks base method.
func (m *MockStorage) SetGauges(val models.GaugesList) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetGauges", val)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetGauges indicates an expected call of SetGauges.
func (mr *MockStorageMockRecorder) SetGauges(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetGauges", reflect.TypeOf((*MockStorage)(nil).SetGauges), val)
}

// UpdateCounter mocks base method.
func (m *MockStorage) UpdateCounter(val models.Counter) (*models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", val)
	ret0, _ := ret[0].(*models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockStorageMockRecorder) UpdateCounter(val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockStorage)(nil).UpdateCounter), val)
}
