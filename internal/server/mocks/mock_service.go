// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination=../../mocks/mock_service.go -package=mocks
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	models "github.com/stepkareserva/obsermon/internal/models"
	gomock "go.uber.org/mock/gomock"
)

// MockGaugesService is a mock of GaugesService interface.
type MockGaugesService struct {
	ctrl     *gomock.Controller
	recorder *MockGaugesServiceMockRecorder
	isgomock struct{}
}

// MockGaugesServiceMockRecorder is the mock recorder for MockGaugesService.
type MockGaugesServiceMockRecorder struct {
	mock *MockGaugesService
}

// NewMockGaugesService creates a new mock instance.
func NewMockGaugesService(ctrl *gomock.Controller) *MockGaugesService {
	mock := &MockGaugesService{ctrl: ctrl}
	mock.recorder = &MockGaugesServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGaugesService) EXPECT() *MockGaugesServiceMockRecorder {
	return m.recorder
}

// FindGauge mocks base method.
func (m *MockGaugesService) FindGauge(ctx context.Context, name string) (*models.Gauge, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGauge", ctx, name)
	ret0, _ := ret[0].(*models.Gauge)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindGauge indicates an expected call of FindGauge.
func (mr *MockGaugesServiceMockRecorder) FindGauge(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGauge", reflect.TypeOf((*MockGaugesService)(nil).FindGauge), ctx, name)
}

// ListGauges mocks base method.
func (m *MockGaugesService) ListGauges(ctx context.Context) (models.GaugesList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGauges", ctx)
	ret0, _ := ret[0].(models.GaugesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGauges indicates an expected call of ListGauges.
func (mr *MockGaugesServiceMockRecorder) ListGauges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGauges", reflect.TypeOf((*MockGaugesService)(nil).ListGauges), ctx)
}

// UpdateGauge mocks base method.
func (m *MockGaugesService) UpdateGauge(ctx context.Context, val models.Gauge) (*models.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", ctx, val)
	ret0, _ := ret[0].(*models.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockGaugesServiceMockRecorder) UpdateGauge(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockGaugesService)(nil).UpdateGauge), ctx, val)
}

// MockCountersService is a mock of CountersService interface.
type MockCountersService struct {
	ctrl     *gomock.Controller
	recorder *MockCountersServiceMockRecorder
	isgomock struct{}
}

// MockCountersServiceMockRecorder is the mock recorder for MockCountersService.
type MockCountersServiceMockRecorder struct {
	mock *MockCountersService
}

// NewMockCountersService creates a new mock instance.
func NewMockCountersService(ctrl *gomock.Controller) *MockCountersService {
	mock := &MockCountersService{ctrl: ctrl}
	mock.recorder = &MockCountersServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCountersService) EXPECT() *MockCountersServiceMockRecorder {
	return m.recorder
}

// FindCounter mocks base method.
func (m *MockCountersService) FindCounter(ctx context.Context, name string) (*models.Counter, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCounter", ctx, name)
	ret0, _ := ret[0].(*models.Counter)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindCounter indicates an expected call of FindCounter.
func (mr *MockCountersServiceMockRecorder) FindCounter(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCounter", reflect.TypeOf((*MockCountersService)(nil).FindCounter), ctx, name)
}

// ListCounters mocks base method.
func (m *MockCountersService) ListCounters(ctx context.Context) (models.CountersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCounters", ctx)
	ret0, _ := ret[0].(models.CountersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCounters indicates an expected call of ListCounters.
func (mr *MockCountersServiceMockRecorder) ListCounters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCounters", reflect.TypeOf((*MockCountersService)(nil).ListCounters), ctx)
}

// UpdateCounter mocks base method.
func (m *MockCountersService) UpdateCounter(ctx context.Context, val models.Counter) (*models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", ctx, val)
	ret0, _ := ret[0].(*models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockCountersServiceMockRecorder) UpdateCounter(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockCountersService)(nil).UpdateCounter), ctx, val)
}

// MockMetricsService is a mock of MetricsService interface.
type MockMetricsService struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServiceMockRecorder
	isgomock struct{}
}

// MockMetricsServiceMockRecorder is the mock recorder for MockMetricsService.
type MockMetricsServiceMockRecorder struct {
	mock *MockMetricsService
}

// NewMockMetricsService creates a new mock instance.
func NewMockMetricsService(ctrl *gomock.Controller) *MockMetricsService {
	mock := &MockMetricsService{ctrl: ctrl}
	mock.recorder = &MockMetricsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsService) EXPECT() *MockMetricsServiceMockRecorder {
	return m.recorder
}

// FindMetric mocks base method.
func (m *MockMetricsService) FindMetric(ctx context.Context, t models.MetricType, name string) (*models.Metric, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMetric", ctx, t, name)
	ret0, _ := ret[0].(*models.Metric)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindMetric indicates an expected call of FindMetric.
func (mr *MockMetricsServiceMockRecorder) FindMetric(ctx, t, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMetric", reflect.TypeOf((*MockMetricsService)(nil).FindMetric), ctx, t, name)
}

// UpdateMetric mocks base method.
func (m *MockMetricsService) UpdateMetric(ctx context.Context, val models.Metric) (*models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", ctx, val)
	ret0, _ := ret[0].(*models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockMetricsServiceMockRecorder) UpdateMetric(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockMetricsService)(nil).UpdateMetric), ctx, val)
}

// UpdateMetrics mocks base method.
func (m *MockMetricsService) UpdateMetrics(ctx context.Context, vals models.Metrics) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", ctx, vals)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockMetricsServiceMockRecorder) UpdateMetrics(ctx, vals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockMetricsService)(nil).UpdateMetrics), ctx, vals)
}

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
	isgomock struct{}
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// FindCounter mocks base method.
func (m *MockService) FindCounter(ctx context.Context, name string) (*models.Counter, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindCounter", ctx, name)
	ret0, _ := ret[0].(*models.Counter)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindCounter indicates an expected call of FindCounter.
func (mr *MockServiceMockRecorder) FindCounter(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindCounter", reflect.TypeOf((*MockService)(nil).FindCounter), ctx, name)
}

// FindGauge mocks base method.
func (m *MockService) FindGauge(ctx context.Context, name string) (*models.Gauge, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindGauge", ctx, name)
	ret0, _ := ret[0].(*models.Gauge)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindGauge indicates an expected call of FindGauge.
func (mr *MockServiceMockRecorder) FindGauge(ctx, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindGauge", reflect.TypeOf((*MockService)(nil).FindGauge), ctx, name)
}

// FindMetric mocks base method.
func (m *MockService) FindMetric(ctx context.Context, t models.MetricType, name string) (*models.Metric, bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindMetric", ctx, t, name)
	ret0, _ := ret[0].(*models.Metric)
	ret1, _ := ret[1].(bool)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// FindMetric indicates an expected call of FindMetric.
func (mr *MockServiceMockRecorder) FindMetric(ctx, t, name any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindMetric", reflect.TypeOf((*MockService)(nil).FindMetric), ctx, t, name)
}

// ListCounters mocks base method.
func (m *MockService) ListCounters(ctx context.Context) (models.CountersList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCounters", ctx)
	ret0, _ := ret[0].(models.CountersList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCounters indicates an expected call of ListCounters.
func (mr *MockServiceMockRecorder) ListCounters(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCounters", reflect.TypeOf((*MockService)(nil).ListCounters), ctx)
}

// ListGauges mocks base method.
func (m *MockService) ListGauges(ctx context.Context) (models.GaugesList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGauges", ctx)
	ret0, _ := ret[0].(models.GaugesList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGauges indicates an expected call of ListGauges.
func (mr *MockServiceMockRecorder) ListGauges(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGauges", reflect.TypeOf((*MockService)(nil).ListGauges), ctx)
}

// UpdateCounter mocks base method.
func (m *MockService) UpdateCounter(ctx context.Context, val models.Counter) (*models.Counter, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCounter", ctx, val)
	ret0, _ := ret[0].(*models.Counter)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCounter indicates an expected call of UpdateCounter.
func (mr *MockServiceMockRecorder) UpdateCounter(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCounter", reflect.TypeOf((*MockService)(nil).UpdateCounter), ctx, val)
}

// UpdateGauge mocks base method.
func (m *MockService) UpdateGauge(ctx context.Context, val models.Gauge) (*models.Gauge, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGauge", ctx, val)
	ret0, _ := ret[0].(*models.Gauge)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGauge indicates an expected call of UpdateGauge.
func (mr *MockServiceMockRecorder) UpdateGauge(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGauge", reflect.TypeOf((*MockService)(nil).UpdateGauge), ctx, val)
}

// UpdateMetric mocks base method.
func (m *MockService) UpdateMetric(ctx context.Context, val models.Metric) (*models.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetric", ctx, val)
	ret0, _ := ret[0].(*models.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetric indicates an expected call of UpdateMetric.
func (mr *MockServiceMockRecorder) UpdateMetric(ctx, val any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetric", reflect.TypeOf((*MockService)(nil).UpdateMetric), ctx, val)
}

// UpdateMetrics mocks base method.
func (m *MockService) UpdateMetrics(ctx context.Context, vals models.Metrics) (models.Metrics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMetrics", ctx, vals)
	ret0, _ := ret[0].(models.Metrics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateMetrics indicates an expected call of UpdateMetrics.
func (mr *MockServiceMockRecorder) UpdateMetrics(ctx, vals any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMetrics", reflect.TypeOf((*MockService)(nil).UpdateMetrics), ctx, vals)
}
